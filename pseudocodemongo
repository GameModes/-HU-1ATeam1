import databaseconnectiemodule, databaseadaptermodule, csvaanmaakbestandmodule

functie verwijderkomma's:
    Geef alle waarden terug, waarbij de komma wordt vervangen door niks
   
connectie = inloggevens voor psycopg2 om te koppelen met de database
cursor = zet een cursor om bij te houden waar je bent

cursor.execute(verwijder alle tabellen als ze eerder zijn gemaakt met hun gegevens)
connectie.commit

cursor.execute(maak tabellen aan met hun relaties en keys)
connectie.commit

#kopje Profiles
Open bestand profiles.csv for WRITE:
   fieldnames = lijst met de bezochte attributen van de collection profifles # kan beter uitgelegd worden 
   profwriter = maakt een Profile Dictionary writer aan voor in de csv bestand uit de plaats van de gegevens (fieldnames)
   c = meetel variabele, om bij fout meldingen te kijken waar het programma gebleven is.
   
   for each profile in de collection profiles in de MongoDB database:
       buidslist = sla de browserids op in een lijst
       buids = voeg alle browserids in buidslist samen  met een komma als scheiding
       
       if ";" niet in de lijst buids zit:
             maakt van de waarde None (niet bestaand) om fouten te voorkomen 
           Schrijf 
            c = c + 1
            
      if c een 100000 tal bereikt dan:
        print(hoeveelheid c)
print(klaar met profiles downloaden)

#kopje Sessions
Open session.csv for WRITE:
   fieldnames = lijst met de bezochte attributen van de collection sessons # kan beter uitgelegd worden
   sesswriter = maakt een Profile Dictionary writer aan voor in de csv bestand uit de plaats van de gegevens (fieldnames)
   c = meetel variabele, om bij fout meldingen te kijken waar het programma gebleven is.
   for sessions in de sectie sessions in de MongoDB database:           
        #Moet nog uitgewerkt worden 

      if c een 100000 tal bereikt dan:
        print(hoeveelheid c)
print(klaar met sessions laden)

#kopje Product
Open de bestanden products.csv, categories.csv,discounts.csv, brands.csv, variants.csv,doelgroep.csv, genders.csv for WRITE 
    prods_fieldnames = opent products bij de sectie genderid
    cats_fieldnames = opent de categorien bij de sectie sub_category
    discs_fieldnames = opent de kortingen bij de sectie discounts
    brands_fieldnames = opent de merken bij de sectie brand
    vars_fieldnames = opent de variatie bij de sectie variant
    doels_fieldnames = opent de doelgroepen bij de sectie doelgroep
    gends_fieldnames = opent de geslacht bij de sectie gender
    prod_writer = maakt een Productie Dictionary writer voor in de csv bestand uit de plaats van de gegevens (prods_fieldnames)
    cats_writer = maakt een Categorie Dictionary writer voor in de csv bestand uit de plaats van de gegevens (cats_fieldnames)
    discs_writer = maakt een Discount Dictionary writer voor in de csv bestand uit de plaats van de gegevens (discs_fieldnames )
    brand_writer = maakt een Merk Dictionary writer voor in de csv bestand uit de plaats van de gegevens (brands_fieldnames)
    var_writer = maakt een Variatie Dictionary writer voor in de csv bestand uit de plaats van de gegevens (vars_fieldnames )
    doel_writer = maakt een doelgroepen Dictionary writer voor in de csv bestand uit de plaats van de gegevens (doels_fieldnames)
    gend_writer = maakt een Geslacht Dictionary writer voor in de csv bestand uit de plaats van de gegevens (gends_fieldnames)
    dict = voor elke gegevenscategorie een lege dictionary behalve products
    for producten in de mongoDB in het kopje Products:
        ~
        voor elke gegevenscategorie ~
        alle_categories = categorie + sub-categorie + sub-sub-categorie
        if alle_categories niet in categoriedictionary:
            if categoriedictionary is niet leeg:
                de plek waar alle_categories in categoriedictionary = zet alle_categories achter in de lijst
            else:
                de plek waar alle_categories in categoriedictionary = zet alle_categories in de lijst
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            laat categorie_writer het volgende schrijven:
                        bij id alle categorieID,
                        bij categorie alle categorien,
                        bij sub-categorie alle sub-categorien,
                        bij sub-sub-categorie alle sub-sub-categorien
            maak de cat_id uit de plek van de CategorieID
            
        if discount niet in discountdictionary:
            if discountdictionary is niet leeg:
                de plek waar alle_discounts in discountdictionary = zet alle_discounts achter in de lijst
            else:
                de plek waar alle_discounts in discountdictionary = zet alle_discounts in de lijst

            laat discount_writer het volgende schrijven:
                        bij id alle discountsID,
                        bij discount alle discounts,
            maak de discount_id uit de plek van de discountID      
            
         if merk niet in merkictionary:
            if merkictionary is niet leeg:
                de plek waar merk in categoriedictionary = zet merk achter in de lijst
            else:
                de plek waar merk in categoriedictionary = zet merk in de lijst

            laat merk_writer het volgende schrijven
                        bij id alle merkID,
                        bij categorie alle merken,
            maak de merk_id uit de plek van de merkID
            
         if variatie niet in variatiedictionary:
            if variatieictionary is niet leeg:
                de plek waar variatie in variatiedictionary = zet variatie achter in de lijst
            else:
                de plek waar variatie in variatiedictionary = zet variatie in de lijst

            laat variatie_writer het volgende schrijven
                        bij id alle variateID,
                        bij categorie alle variaties,
            maak de variatie_id uit de plek van de variatieID
        
         if doelgroep niet in doelgroepdictionary:
            if deolgroepdictionary is niet leeg:
                de plek waar doelgroep in doelgroepdictionary = zet alle_categories achter in de lijst
            else:
                de plek waar alle_categories in categoriedictionary = zet alle_categories in de lijst

            laat categorie_writer het volgende schrijven
                        bij id alle categorieID,
                        bij categorie alle categorien,
                        bij sub-categorie alle sub-categorien,
                        bij sub-sub-categorie alle sub-sub-categorien
            maak de cat_id uit de plek van de CategorieID
            
         if alle_categories niet in categoriedictionary:
            if categoriedictionary is niet leeg:
                de plek waar alle_categories in categoriedictionary = zet alle_categories achter in de lijst
            else:
                de plek waar alle_categories in categoriedictionary = zet alle_categories in de lijst

            laat categorie_writer het volgende schrijven
                        bij id alle categorieID,
                        bij categorie alle categorien,
                        bij sub-categorie alle sub-categorien,
                        bij sub-sub-categorie alle sub-sub-categorien
            maak de cat_id uit de plek van de CategorieID
         
         if alle_categories niet in categoriedictionary:
            if categoriedictionary is niet leeg:
                de plek waar alle_categories in categoriedictionary = zet alle_categories achter in de lijst
            else:
                de plek waar alle_categories in categoriedictionary = zet alle_categories in de lijst

            laat categorie_writer het volgende schrijven
                        bij id alle categorieID,
                        bij categorie alle categorien,
                        bij sub-categorie alle sub-categorien,
                        bij sub-sub-categorie alle sub-sub-categorien
            maak de cat_id uit de plek van de CategorieID
            
            

            if "." not in str(product["price"]["selling_price"]):
                try:
                    prod_writer.writerow(
                        {
                            'id': prod_id,
                            'name': remove_commas(str(product.get("name", None))),
                            'price': product["price"]["selling_price"],
                            'category_id': cat_id,
                            'discount_id': disc_id,
                            'brand_id': brand_id,
                            'variant_id': var_id,
                            'doelgroep_id': doel_id,
                            'gender_id': gend_id
                        }
                    )
                    c += 1
                except:
                    continue
            if c % 10000 == 0:
                print("{} product records written...".format(c))
        except:
            print(prod_id)
    print(f"Finished creating the product database contents. {c} rows loaded.")


# Profiles
with open('profiles.csv', 'r') as profs: 
    next(profs)
    cur.copy_from(profs, 'profiles', sep=';')
    conn.commit()
print("Profiles copied!")

# Misschien kan je dit pseudocode gebruiken 
#Vb profiles
Open bestand profiles.csv:
    skip header row van profiles.csv
    importeer profiles.csv in tabel profiles
Print('Profiles copied')


# Sessions
with open('sessions.csv', 'r') as sess:
    next(sess) 
    cur.copy_from(sess, 'sessions', sep=',')
    conn.commit()
print("Sessions copied!")

#Vb sessions
Open bestand sessions.csv:
    skip header row van session.csv
    importeer profiles.csv in tabel sessions
Print('Sessions copied')


# Products
with open('products.csv', 'r') as prods, open('categories.csv', 'r') as cats, open('discounts.csv', 'r') as discs, open('brands.csv', 'r') as brands, open('variants.csv', 'r') as vars, open('doelgroepen.csv', 'r') as doels, open('genders.csv', 'r') as gends:
    next(prods)
    cur.copy_from(prods, 'products', sep=',')
    next(cats)
    cur.copy_from(cats, 'categories', sep=',')
    next(discs)
    cur.copy_from(discs, 'discounts', sep=',')
    next(brands)
    cur.copy_from(brands, 'brands', sep=',')
    next(vars)
    cur.copy_from(vars, 'variants', sep=',')
    next(doels)
    cur.copy_from(doels, 'doelgroepen', sep=',')
    next(gends)
    cur.copy_from(gends, 'genders', sep=',')
    conn.commit()
print("Products copied!")

#Voor products misshcien deze:
Open de bestanden products.csv, categories.csv, discounts.csv, brands.csv, variants.csv, doelgroepen.csv, genders.csv:
    skip header row van products.csv
    importeer products.csv in tabel products
    skip header row van categories.csv
    importeer products.csv in tabel categories
    skip header row van discounts.csv
    importeer products.csv in tabel discounts
    skip header row van brands.csv
    importeer products.csv in tabel brands
    skip header row van variants.csv
    importeer products.csv in tabel variants
    skip header row van doelgroepen.csv
    importeer products.csv in tabel doelgroepen
    skip header row van genders.csv
    importeer products.csv in tabel genders
Print('Profiles copied')

conn.close() Sluit cconnectie met database

print("Check postgres")
playsound('C:/Users/Floris Videler/Downloads/Ding Sound Effect.mp3')
    
    
